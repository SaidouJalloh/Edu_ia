// src/apis/simple-plan.js
const express = require('express');
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');

const router = express.Router();

// Fonction pour appeler Ollama
async function callLlama(prompt, options = {}) {
    try {
        const response = await axios.post(`${process.env.OLLAMA_URL}/api/generate`, {
            model: process.env.LLAMA_MODEL,
            prompt: prompt,
            stream: false,
            options: {
                temperature: options.temperature || 0.7,
                max_tokens: options.max_tokens || 800
            }
        });

        return response.data.response;
    } catch (error) {
        console.error('Erreur Llama:', error.message);
        throw new Error('Erreur g√©n√©ration IA');
    }
}

// API POST /ai/simple-plan
router.post('/simple-plan', async (req, res) => {
    try {
        const {
            topic,
            type,           // "conceptual" ou "demonstrative"
            level,          // "beginner", "intermediate", "advanced"
            duration_minutes = 5
        } = req.body;

        // Validation
        if (!topic || !type || !level) {
            return res.status(400).json({
                error: 'Param√®tres manquants: topic, type, level requis'
            });
        }

        console.log(`üìã G√©n√©ration plan simple: ${topic} (${type}, ${level}, ${duration_minutes}min)`);

        const planId = uuidv4();

        // Prompt simplifi√© pour plan seulement
        const prompt = `Tu es un expert en p√©dagogie. Cr√©e un plan de formation micro-learning.

SUJET: ${topic}
TYPE: ${type === 'conceptual' ? 'Formation conceptuelle (th√©orie, soft-skills)' : 'Formation d√©monstrative (logiciels, proc√©dures)'}
NIVEAU: ${level}
DUR√âE: ${duration_minutes} minutes

CONSIGNE:
G√©n√®re un plan structur√© avec 3-4 sections maximum. Chaque section doit avoir:
- Un titre clair et accrocheur
- Une dur√©e en secondes
- Un objectif p√©dagogique pr√©cis

FORMAT DE R√âPONSE (JSON uniquement):
[
  {
    "title": "Titre de la section",
    "objective": "Objectif p√©dagogique de cette section",
    "duration_seconds": 30
  }
]

Le total des dur√©es doit faire ${duration_minutes * 60} secondes maximum.

${type === 'demonstrative' ?
                'SP√âCIAL D√âMONSTRATIF: Les titres doivent indiquer les actions concr√®tes (ex: "Ouvrir Excel", "Cr√©er le tableau", etc.)' :
                'SP√âCIAL CONCEPTUEL: Les titres doivent couvrir la compr√©hension et l\'application pratique.'}

R√©ponds UNIQUEMENT avec le JSON:`;

        const response = await callLlama(prompt, {
            temperature: 0.6,
            max_tokens: 600
        });

        // Parse du JSON
        let planSections;
        try {
            // Extraction du JSON
            const jsonMatch = response.match(/\[[\s\S]*\]/);
            planSections = jsonMatch ? JSON.parse(jsonMatch[0]) : [
                {
                    title: "Introduction",
                    objective: "Pr√©senter le sujet et les objectifs",
                    duration_seconds: 30
                },
                {
                    title: "D√©veloppement principal",
                    objective: "Ma√Ætriser les points cl√©s",
                    duration_seconds: 240
                },
                {
                    title: "Conclusion",
                    objective: "R√©capituler et donner les prochaines √©tapes",
                    duration_seconds: 30
                }
            ];
        } catch (e) {
            console.warn('Erreur parsing JSON, utilisation plan par d√©faut');
            planSections = [
                {
                    title: "Introduction",
                    objective: "Pr√©senter le sujet",
                    duration_seconds: 30
                },
                {
                    title: "Points cl√©s",
                    objective: "Ma√Ætriser l'essentiel",
                    duration_seconds: duration_minutes * 60 - 60
                },
                {
                    title: "Conclusion",
                    objective: "R√©capituler",
                    duration_seconds: 30
                }
            ];
        }

        // Validation des dur√©es
        const totalDuration = planSections.reduce((sum, section) => sum + section.duration_seconds, 0);

        const result = {
            plan_id: planId,
            topic,
            type,
            level,
            duration_minutes,
            total_duration_seconds: totalDuration,
            sections_count: planSections.length,
            sections: planSections,
            generated_at: new Date().toISOString(),
            status: 'completed'
        };

        console.log(`‚úÖ Plan simple g√©n√©r√©: ${planSections.length} sections, ${totalDuration}s total`);
        res.json(result);

    } catch (error) {
        console.error('Erreur g√©n√©ration plan simple:', error);
        res.status(500).json({
            error: 'Erreur lors de la g√©n√©ration du plan',
            details: error.message
        });
    }
});

module.exports = router;

// Mise √† jour src/server.js - Ajouter cette ligne:
// const simplePlanRouter = require('./apis/simple-plan');
// app.use('/ai', simplePlanRouter);

/*
TEST POSTMAN:

POST http://localhost:3001/ai/simple-plan
Content-Type: application/json

Body:
{
  "topic": "Cr√©er un TCD sur Excel",
  "type": "demonstrative",
  "level": "beginner",
  "duration_minutes": 5
}

R√âPONSE ATTENDUE:
{
  "plan_id": "uuid-g√©n√©r√©",
  "topic": "Cr√©er un TCD sur Excel",
  "type": "demonstrative",
  "level": "beginner", 
  "duration_minutes": 5,
  "total_duration_seconds": 300,
  "sections_count": 4,
  "sections": [
    {
      "title": "üéØ Introduction aux TCD",
      "objective": "Comprendre l'utilit√© des tableaux crois√©s dynamiques",
      "duration_seconds": 30
    },
    {
      "title": "üìä S√©lectionner les donn√©es",
      "objective": "Apprendre √† choisir et pr√©parer les donn√©es sources",
      "duration_seconds": 90
    },
    {
      "title": "‚öôÔ∏è Cr√©er le TCD",
      "objective": "Ins√©rer et configurer le tableau crois√© dynamique",
      "duration_seconds": 150
    },
    {
      "title": "‚úÖ Finalisation",
      "objective": "Personnaliser et valider le r√©sultat",
      "duration_seconds": 30
    }
  ],
  "generated_at": "2025-06-16T...",
  "status": "completed"
}
*/